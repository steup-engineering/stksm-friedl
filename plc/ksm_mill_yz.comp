component ksm_mill_yz "KSM Profil Mills";

author "Dominik Braun ";
license "GPL";

include "math.h";

option singleton no;


//PLC Interface
pin in bit ctrl_voltage;
pin in bit motor_ctrl_voltage;
pin in bit automatic_running;
pin in bit home;
pin in bit belt_start; 

pin out bit done;
pin out bit busy;
pin out bit error;
pin out bit homed;
pin out bit ready; 
pin out bit belt_start_enable; 

//mill stations
pin in float home_offset_z;
pin in float home_offset_y;
pin in float tool_offset_z;
pin in float tool_offset_y;
pin in signed tool_ref_z;
pin in float  mat_heigth; 

pin in float target_z;
pin in float target_y;

pin in bit jog_pos_z;
pin in bit jog_neg_z;
pin in bit jog_pos_y;
pin in bit jog_neg_y;
pin in bit man_setup;

pin in bit active;

pin out bit softend_limit;

pin out float act_pos_z;
pin out float act_pos_y;

pin out float act_tool_pos_z;
pin out float act_tool_pos_y;

pin out bit error_z;
pin out bit error_y;
pin out unsigned error_code_z;
pin out unsigned error_code_y;

/*
jog-velo

pos-velo

softend-min

softend-max
*/
//drives interface
pin out bit drives_enable;

pin out float drv_pos_cmd_z;
pin out float drv_pos_cmd_y;
pin io bit drv_new_setpoint_z;
pin io bit drv_new_setpoint_y;

pin io  bit drv_home_z;
pin io  bit drv_home_y;

pin out bit drv_jog_pos_z;
pin out bit drv_jog_pos_y;
pin out bit drv_jog_neg_z;
pin out bit drv_jog_neg_y;

pin in bit drv_enabled_z;
pin in bit drv_enabled_y;
pin in bit drv_fault_z;
pin in bit drv_fault_y; 

pin in bit drv_target_reached_z;
pin in bit drv_target_reached_y;

pin in bit drv_homed_z;
pin in bit drv_homed_y;

pin in float drv_act_pos_z;
pin in float drv_act_pos_y;


pin in signed drv_pos_fb_raw_z;
pin in signed drv_pos_fb_raw_y;

//parameter
param rw float power_on_delay_time = 0.1 "Power on delay for 48V";
param rw float safty_pos = 2.0 "safty pos for inactive Mill";
param rw float drv_softend_max_z "Softend max z raw"; 
param rw float drv_softend_max_y "Softend max y raw"; 
param rw float drv_softend_min_z "Softend min z raw"; 
param rw float drv_softend_min_y "Softend min y raw"; 

//instance data
variable bool home_old =0;
variable bool belt_start_old =0;
variable bool homing =0;
variable bool posi_z =0;
variable bool posi_y =0;
variable bool motor_ctrl_voltage_old = 0; 
variable float pon_timer = 0; 
variable float target_z_old = 0;
variable float target_y_old = 0;
variable bool drv_target_reached_z_old = 0;
variable bool drv_target_reached_y_old = 0;

function _;

;;

FUNCTION(_) {
  double period_sec; 
  bool drives_on; 

  // get period in seconds
  period_sec = (double)period * 1e-9;

  //error state 
  error = drv_fault_z || drv_fault_y;

  //enable
  if (motor_ctrl_voltage && !motor_ctrl_voltage_old) {
    pon_timer = power_on_delay_time; 
  }

  if (pon_timer <= 0) {
    drives_enable = motor_ctrl_voltage;
  } else {
    pon_timer -= period_sec;
  }
  
  motor_ctrl_voltage_old = motor_ctrl_voltage; 
  
  drives_on = drv_enabled_z && drv_enabled_y; 

  //homing
  homed = drv_homed_z && drv_homed_y;     //homed state

  if (homed && homing) {         //reset home input
    homing = 0;
  } 

  if (home && !home_old && drives_on && ctrl_voltage) {   //start homing
    drv_home_z = 1;
    drv_home_y = 1;
    homing = 1; 
  }
  home_old = home; 


  //positioning
  if (posi_z && (drv_target_reached_z && !drv_target_reached_z_old)) {
    posi_z = 0; 
  }
  if (posi_y && (drv_target_reached_y && !drv_target_reached_y_old)) {
    posi_y = 0; 
  }
  done = !posi_z && !posi_y; 

  drv_target_reached_z_old = drv_target_reached_z;
  drv_target_reached_y_old = drv_target_reached_y;

  //calc target positions 
  //Z pos
  // tool ref center
  if (tool_ref_z == 0) {
    drv_pos_cmd_z = target_z - home_offset_z + tool_offset_z + (mat_heigth /2);
    //tool ref bottom
  } else if (tool_ref_z < 0) {
      drv_pos_cmd_z = target_z - home_offset_z + tool_offset_z;
    //toll ref upper      
    } else if (tool_ref_z >0) {
       drv_pos_cmd_z = target_z - home_offset_z + tool_offset_z + mat_heigth;
    }

  //Y pos
  drv_pos_cmd_y = target_y + home_offset_y - (tool_offset_y /2);    

  //reset belt enable 
  belt_start_enable = 0; 
  
  //set start position
  if (active && drives_on && homed && mat_heigth !=0 && belt_start && !belt_start_old) {
    drv_new_setpoint_z = 1;
    drv_new_setpoint_y = 1; 
    done = 0; 
  }
 
  //handle belt start enable 
  if (active && fabsf(target_z - act_tool_pos_z) < 0.05 && fabsf(target_y - act_tool_pos_y) < 0.05) {
    belt_start_enable = 1; 
  } else if (!active) { 
      belt_start_enable = 1;
  }
  //belt start for inactive mill
  if (!active && drv_act_pos_y > safty_pos ) {
    if (belt_start && !belt_start_old) {
      drv_pos_cmd_y= 0; 
      drv_new_setpoint_y = 1;
    }    
  belt_start_enable =0; 
  }      

  belt_start_old = belt_start;  

  //active state
  if (automatic_running && homed && active) {
    if (active) {
      drv_pos_cmd_y = target_y + home_offset_y - (tool_offset_y / 2);    
    } else {
        drv_pos_cmd_y = 0;
      }
  drv_new_setpoint_y = 1; 
  }
  

  //step positionig while automatic 
  if (homed && automatic_running && active) {
    if ((target_z != target_z_old) && !posi_z) {
      drv_new_setpoint_z = 1; 
      done = 0; 
    } 
    if ((target_y != target_y_old) && !posi_y) {
      drv_new_setpoint_y = 1; 
      done = 0; 
    } 
  }
  target_z_old = target_z;
  target_y_old = target_y;

  //posi_state 
  if (drv_new_setpoint_z) {
    posi_z = 1;
  }
  if (drv_new_setpoint_y) {
    posi_y = 1;
  }
  
  //jogging  
  if (!automatic_running && !homing && !posi_z && !posi_y && (homed || (motor_ctrl_voltage && drives_on))) {
    drv_jog_pos_y = jog_pos_y;
    drv_jog_neg_y = jog_neg_y;
    drv_jog_pos_z = jog_pos_z;
    drv_jog_neg_z = jog_neg_z;
  } else {
      drv_jog_pos_y = 0;
      drv_jog_neg_y = 0;
      drv_jog_pos_z = 0;
      drv_jog_neg_z = 0;
    }

  //jog soft limits
  if (ctrl_voltage) {

    if (drv_pos_fb_raw_y <= drv_softend_min_y) {
      drv_jog_neg_y = 0; 
    }
    if (drv_pos_fb_raw_y >= drv_softend_max_y) {
      drv_jog_pos_y = 0; 
    }

    if (drv_pos_fb_raw_z <= drv_softend_min_z) {
      drv_jog_neg_z = 0; 
    }
    if (drv_pos_fb_raw_z >= drv_softend_max_z) {
      drv_jog_pos_z = 0; 
    }
  }
  //act machine position
  if (homed) {
    act_pos_z = drv_act_pos_z + home_offset_z;
    act_pos_y = drv_act_pos_y - home_offset_y;        
  } else {
      act_pos_z = 0;
      act_pos_y = 0;
  }

  //act tool position
  if (homed) {
    //Z pos
    // tool ref center
    if (tool_ref_z == 0) {
      act_tool_pos_z = drv_act_pos_z + home_offset_z - tool_offset_z - (mat_heigth /2);
      //tool ref bottom
    } else if (tool_ref_z < 0) {
        act_tool_pos_z = drv_act_pos_z + home_offset_z - tool_offset_z;
      //toll ref upper      
      } else if (tool_ref_z >0) {
         act_tool_pos_z = drv_act_pos_z + home_offset_z - tool_offset_z - mat_heigth;
      }
    
    //Y tool pos
    act_tool_pos_y = drv_act_pos_y - home_offset_y + (tool_offset_y /2);        

  } else {
      act_tool_pos_z = 0;
      act_tool_pos_y = 0;
  }
  
  //cast positions 2 decimal
  act_pos_z = (int)(act_pos_z*100);
  act_pos_z = act_pos_z/100;

  act_pos_y = (int)(act_pos_y*100);
  act_pos_y = act_pos_y / 100;
 
  act_tool_pos_z = (int)(act_tool_pos_z*100);
  act_tool_pos_z = act_tool_pos_z / 100;
  
  act_tool_pos_y = (int)(act_tool_pos_y*100);
  act_tool_pos_y = act_tool_pos_y / 100;

  busy = homing || posi_z || posi_y;
  ready = drives_on;

  if (!ctrl_voltage && !motor_ctrl_voltage) {
    error = 0; 
    busy = 0;
    posi_z = 0;
    posi_y = 0;  
    done = 0; 
    belt_start_enable = 0; 
    drv_new_setpoint_z =0;
    drv_new_setpoint_y =0;
    drv_home_z = 0;
    drv_home_y = 0; 
    //home = 0;
  }

}

